## Learning Objectives
By the end of this lesson, you will:
- Be able to transform or create new variables based on conditions using 'replace()' and dictionaries.
- know how to handle 'NaN' values in 'replace()' transformations
- be able to define and apply custom functions to recode variables


```{python}
import pandas as pd
import numpy as np
import vega_datasets as vd
import plotly.express as px
```

# Intro to replace()

```{python}
tips = px.data.tips()
tips['day'].value_counts()
tips
```


```{python}
#create dictionary with mapping of new to old values

day_mapping = {
    "Sun": "Sunday",
    "Sat": "Saturday",
    "Thur": "Thursday",
    "Fri": "Friday"
}
tips['day'] = tips['day'].replace(day_mapping)
tips
```

```{python}
#can also nest it directly if only a few values

tips['day'] = tips['day'].replace({
    "Sun": "Sunday",
    "Sat": "Saturday",
    "Thur": "Thursday",
    "Fri": "Friday"
})
tips
```

# Practice Q: Abbreviate Sex

Using the 'tips' dataset, replace the values in the 'sex' column to abbreviate gender:
- Replace 'Female' with "F"
- Replace 'Male' with "M"
Assign the result to a new column called 'sex_abbr' and display the first few rows


```{python}
tips['sex_abbr'] = tips['sex'].replace({
    "Female": "F",
    "Male": "M"
})
tips
```

# Handling Missing Values with replace()

```{python}
# temporary solution to avoid SSL certificate verification error
#import ssl
#ssl._create_default_https_context = ssl._create_unverified_context
```

```{python}
movies = pd.read_csv("/Users/priscillawang/Desktop/graph_courses_python/data/movies-1731168734.9527.csv")
movies['Creative_Type'].value_counts(dropna=False)
```

```{python}
# replacing None values with a string
movies['Creative_Type'] = movies['Creative_Type'].replace({None: "Unknown/Unclear"}) 
movies['Creative_Type'].value_counts(dropna=False)
```


```{python}
# Replacing NaN values with a number
movies['US_DVD_Sales'].tail(10)
movies['US_DVD_Sales'] = movies['US_DVD_Sales'].replace({np.nan:0})
```


```{python}
movies['US_DVD_Sales'].tail(10)
```

# Practice Q: Standardize MPAA Ratings
In the 'movies' dataset, the 'MPAA_Rating' column contains movie ratings. Some entries are 'None' or 'Not_Rated'. Replace both 'None' and 'Not Rated' with 'Unrated'

Then, use 'value_counts()' to see how many movies are unrated. There should be 699 movies in this category.


```{python}
movies["MPAA_Rating"].value_counts(dropna=False)
```

```{python}
movies["MPAA_Rating"] = movies["MPAA_Rating"].replace({"Not Rated": "Unrated", None: "Unrated"})
movies["MPAA_Rating"].value_counts(dropna=False)
```

# Categorizing Numeric Data with Custom Functions

Categorize the US_Gross variable
- If the value is less than 10mil, Low
- If the value is between 10 and 50 mil, Medium
- if greater than 50mil, high


```{python}
def categ_gross(gross):
    if gross < 10000000:
        return "Low"
    elif gross >= 10000000 and gross <=50000000:
        return "Medium"
    elif gross > 50000000:
        return "High"
    else:
        return None

categ_gross_vec = np.vectorize(categ_gross)
categ_gross_vec([500, 700])
```


```{python}
movies['gross_category'] = categ_gross_vec(movies['US_Gross'])
movies['gross_category'] 
```

# Complex Transformations with Custom Functions
- for super hero movies, if the US gross and worldwide gross are the same (indicating sales were only in the US), the movie is flagge as a **US action movie**.
- for super hero movies, if the worldwide gross is greater than the US gross, the movie is flagged as a **global action movie**
- for all other movies, we leave the flag blank


```{python}
def flag_movie(movie_type, us, worldwide):
    if movie_type == "Super Hero" and us == worldwide:
        return "US action movie"
    elif movie_type == "Super Hero" and worldwide > us:
        return "Global action movie"
    else:
        return None
flag_movie_vec = np.vectorize(flag_movie)
```


```{python}
flag_movie(movie_type="Super Hero", us=100, worldwide=100)
flag_movie(movie_type="Super Hero", us=100, worldwide=200)
flag_movie(movie_type="Comedy", us=100, worldwide=100)

```


```{python}
movies["action_flag"] = flag_movie_vec(movie_type = movies["Creative_Type"], us=movies["US_Gross"], worldwide=movies["Worldwide_Gross"])
movies["action_flag"].value_counts()
```

# Practice: Flag Movies Based on Ratings

In the 'movies' dataset, flag movies as **Critic-friendly** or **Commercial** based on their Rotten Tomatoes and IMDB ratings
- if the rotten tomatoes rating is above 70% and the IMDB rating is below 5, the movie is flagged as **critic-friendly**
- if RT rating is below 50% and IMDV rating is above 7, the movies is flagged as **commercial**
- otherwise, the movie is categorized as **other**
- count how many movies are **critic-friendly** and **commercial**. there should be 13 critic-friendly movies and 33 commercial movies.


```{python}
def movie_status(Rotten_Tomatoes_Rating, IMDB_Rating):
    if Rotten_Tomatoes_Rating > 70 and IMDB_Rating < 5:
        return "Critic-Friendly"
    elif Rotten_Tomatoes_Rating < 50 and IMDB_Rating > 7:
        return "Commercial"
    else:
        return "other"

movie_status_vec = np.vectorize(movie_status)
```

```{python}
movies["movie_status"] = movie_status_vec(movies["Rotten_Tomatoes_Rating"], movies["IMDB_Rating"])
movies["movie_status"].value_counts()

```