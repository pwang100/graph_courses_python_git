# Learning Objectives

- Understand how to create new variables in a DataFrame.
- Learn how to modify existing variables.

# Imports

```{python}
import pandas as pd

pd.options.mode.copy_on_write = True
```

# Dataset


```{python}
counties = pd.read_csv("/Users/priscillawang/Desktop/graph_courses_python/data/us_counties_data.csv")
counties
```
The variables in the dataset are:
- state: US state
- county: US county
- pop_20: Population estimate for 2020
- area_sq_miles: Area in square miles
- hh_inc_21: Median household income for 2021
- econ_type: Economic type of the county
- pop_change_2010_2020: Population change between 2010 and 2020 (%)
- unemp_20: Unemployment rate for 2020 (%)
- pct_emp_change_2010_2021: Percentage change in employment between 2010 and 2021 (%)
- foreign_born_num: Number of foreign-born residents



```{python}
area_df = counties[["county", "area_sq_miles", "pop_20"]]
area_df
```

# Creating New Variables


```{python}
# make new variable with area in sq km
area_df["area_sq_km"] = area_df["area_sq_miles"] * 2.59
# make new variable with area in hectares
area_df["area_hectares"] = area_df["area_sq_km"]*100
area_df
```

# Practice Q: Area in Acres
Using the 'area_df' dataset, create new column called 'area_acres' by multiplying the 'area_sq_miles' variable by 640. Store the result back into 'area_df' and display the DataFrame.


```{python}
area_df["area_acres"] = area_df["area_sq_miles"] * 640
area_df
```

# Modifying Existing Variables


```{python}
#overwrite original column with rounded version
area_df["area_sq_km"] = area_df["area_sq_km"].round(2)
# if need to redo and change to different rounded decimal, can "run above" and then implement change
area_df
```

# Practice Q: Rounding 'area_acres'
Using the 'area_df' dataset, round the 'area_acres' variable to one decimal place. Update the DataFrame and display it.


```{python}
area_df["area_acres"] = area_df["area_sq_km"].round(1)
area_df
```

# Calculating with Multiple Varaibles


```{python}
# overwrite variable
area_df["pop_per_sq_km"] = (area_df["pop_20"] / area_df["area_sq_km"]).round(1)
# overwrite entire dataframe via sorting by a varaible
area_df = area_df.sort_values(by = "pop_per_sq_km", ascending=False)
area_df
```

# Practice Q: Foreign Born Percentage

Use the 'counties' dataset to calculate the percentage of foreign-born residents in each county (remember to multiply your proportion by 100). The variable 'foreign_born_num' shows the number of foreign-born residents and 'pop_20' shows the total population. Which two counties have the highest percentage of foreign-born residents?


```{python}
foreign_df = counties[["county", "foreign_born_num", "pop_20"]]
foreign_df["percent_foreign"] = ((foreign_df["foreign_born_num"] / foreign_df["pop_20"]) * 100)
foreign_df
```


```{python}
foreign_df = foreign_df.sort_values(by = "percent_foreign", ascending=False)
foreign_df
```

# Creating Boolean Variables

```{python}
changes_df = counties[["county", "pop_change_2010_2020", "pct_emp_change_2010_2021"]]
changes_df
```

```{python}
changes_df["pop_increase"] = changes_df["pop_change_2010_2020"] > 0 
changes_df["emp_increase"] = changes_df["pct_emp_change_2010_2021"] > 0
changes_df
```


```{python}
changes_df.query("pop_increase == True & emp_increase == False")
#can also do it like this, since variables are inherently Booleans
changes_df.query("pop_increase & ~(emp_increase)")
```

# Practice Q: Categorize Counties by Foreign-Born Population

In a previous practice question, we calculated the percentage of foreign-born residents in each county. Now, create a Boolean variable 'foreign_born_pct_gt_30' that is True if the percentage is greater than 30%.

When you're done, query the DataFrame to show only counties where 'foreign_born_pct_gt_30' is True. You should get 24 rows.


```{python}
foreign_df["foreign_born_pct_gt_30"] = foreign_df["percent_foreign"] > 30
foreign_df
```


```{python}
foreign_df.query("foreign_born_pct_gt_30")
```

# Copy on Write Warning


```{python}
pd.options.mode.copy_on_write = False

counties_mini = counties [["county", "area_sq_miles"]]

counties_mini["area_sq_miles"] = counties_mini["area_sq_miles"].round(2)

counties_mini
```