## Learning objectives
- You understand the concept of a one-to-many join
- You know how to join on multiple key columns
- You know how to check for mismatched values between dataframes

## Packages

```{python}
import pandas as pd
from country_converter import CountryConverter as cc
import plotly.express as px
```

## Data

```{python}
# Load datasets
oil_consumption = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_consumption.csv"
)
tidyr_population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
country_regions = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/country_continent_data.csv"
)


oil_2012 = (
    oil_consumption[oil_consumption["year"] == 2012].copy().drop(columns=["year"])
)

# people data
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

test_info_many = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"],
        "test_date": [
            "2023-06-05",
            "2023-06-10",
            "2023-08-10",
            "2023-05-02",
            "2023-05-12",
            "2023-05-15",
        ],
        "result": [
            "Negative",
            "Positive",
            "Positive",
            "Negative",
            "Negative",
            "Negative",
        ],
    }
)

farm_info = pd.DataFrame(
    {
        "farm_id": [1, 2, 3],
        "farm_name": ["Green Acres", "Harvest Hill", "Golden Fields"],
        "location": ["County A", "County B", "County A"],
    }
)

crop_yields = pd.DataFrame(
    {
        "farm_id": [1, 1, 2, 3, 3],
        "crop": ["Wheat", "Corn", "Soybeans", "Wheat", "Barley"],
        "yield_tons": [50, 60, 45, 55, 30],
    }
)

traffic_flow = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "vehicle_count": [1200, 900, 1500, 1100, 700, 600],
    }
)

pollution_levels = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "pm_2_5_level": [35.5, 42.1, 40.3, 48.2, 25.7, 30.9],
    }
)

test_info_diff = pd.DataFrame(
    {
        "name": ["alice", "Bob", "Charlie "],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

asia_countries = pd.DataFrame(
    {
        "Country": ["India", "Indonesia", "Philippines"],
        "Capital": ["New Delhi", "Jakarta", "Manila"],
    }
)

asia_population = pd.DataFrame(
    {
        "Country": ["India", "indonesia", "Philipines"],
        "Population": [1393000000, 273500000, 113000000],
        "Life_Expectancy": [69.7, 71.7, 72.7],
    }
)
```

## One to many joins


```{python}
people
```


```{python}
test_info_many
```


```{python}
pd.merge(people, test_info_many)
```

# Practice Q: Merging One-to-Many CropYields
Run the code below to print the two small dataframes:

```{python}
farm_info
```

```{python}
crop_yields
```

If you use a 'merge()' to join these datasets, how many rows will be in the final dataframe? Try to figure it out and then perform the join to see if you were right.

```{python}
pd.merge(farm_info, crop_yields)
```

## Multiple Key Columns

```{python}
traffic_flow
```

```{python}
pollution_levels
```


```{python}
# Incorrect
pd.merge(traffic_flow, pollution_levels, on = "street_name")
```

```{python}
#Correct: merge based on two keys
pd.merge(traffic_flow, pollution_levels, on=["street_name", "time_of_day"])
```

# Practice Q: Calculate oil consumption per capital
We have two datasets containing information about countries:
- 'oil_consumption': Contains yearly oil consumption in tonnes
- 'tidyr_population': Contains yearly population data

```{python}
# View the datasets
oil_consumption.sort_values(by=['country', 'year'])
```

```{python}
tidyr_population.sort_values(by=['country', 'year'])
```

1. Join these datasets using 'merge()' with a left join since we want to match both country AND year, you'll need to join on multiple columns. (You may notice that not all rows are matched. You can ignore this for now.)

2. After joining, create a new column called 'consumption_per_capita' that calculates the yearly oil consumption per person (in tonnes).

3. Which country had the highest per capita oil consumption in 2013?

```{python}
oil_consumption_pop = pd.merge(oil_consumption, tidyr_population, on=["country", "year"], how="left")

oil_consumption_pop
```

```{python}
oil_consumption_pop["population"] = pd.to_numeric(oil_consumption_pop["population"])
```

```{python}
oil_consumption_pop["consumption_per_capita"] = oil_consumption_pop["oil_consump"] / oil_consumption_pop["population"]

oil_consumption_pop
```


```{python}
oil_consumption_pop_sort = oil_consumption_pop.sort_values(by=["consumption_per_capita"], ascending=False)

oil_consumption_pop_sort
```

```{python}
px.scatter(oil_consumption_pop_sort, x = "country", y="consumption_per_capita")
```

## Key Mismatches

```{python}
people
```


```{python}
test_info_diff
```


```{python}
pd.merge(people, test_info_diff)
```


```{python}
test_info_diff["name"] = test_info_diff["name"].str.title()
```

```{python}
pd.merge(people, test_info_diff)
```

```{python}
test_info_diff['name'].unique() #charlie has a trailing white space
```


```{python}
test_info_diff['name'] = test_info_diff['name'].str.strip()
```

```{python}
pd.merge(people, test_info_diff)
```

# Practice Q: Inner Join countries

The following two datasets contain data for India, Indonesia and the Philippines. However, an 'inner' join of these datasets only returns 1 row.


```{python}
asia_countries
```

```{python}
asia_population
```

```{python}
pd.merge(asia_countries, asia_population)
```

What are the differences between the values in the key columns that would have to be changed before joining the datasets? Pay attention to capitalization and spelling.

Now fix the mismatched values in the 'county' column and try the join again.

```{python}
asia_countries['Country'].unique()
```

```{python}
asia_population['Country'].unique()
```

```{python}
asia_population["Country"] = asia_population["Country"].str.title()
asia_population
```


```{python}
asia_population = asia_population.replace({'Philipines': 'Philippines'})
asia_population
```
```{python}
pd.merge(asia_countries, asia_population)
```

## Key Mismatches: Oil consumption example

```{python}
oil_consumption.sort_values(["country", "year"])
```

```{python}
tidyr_population
```

```{python}
oil_pop = pd.merge(oil_consumption, tidyr_population, how="left", on=["country", "year"]).sort_values(["country", "year"])

oil_pop
```

```{python}
oil_countries = set(oil_consumption['country'].unique())
pop_countries = set(tidyr_population['country'].unique())

```

```{python}
# countries in oil but not in pop
oil_countries - pop_countries
```

```{python}
# countries in pop but not in oil
pop_countries - oil_countries 
```

```{python}
# side note on set arithmetic
set1 = set([1, 2, 3, 4, 5])
set2 = set([2, 3, 4])

set1 - set2
```

## Merging with country codes

```{python}
cc.convert(names="Nigeria", to="ISO3") #not working
```

```{python}
oil_consumption["country_code"] = cc.convert(oil_consumption["country"], to="ISO3")
tidyr_population["country_code"] = cc.convert(tidyr_population["country"], to="ISO3")
```

```{python}
oil_countries - pop_countries
```

# Practice Q: Merging Oil consumption with geographic data
Run the code to view the two datasets:
The first, "oil_2012", records the oil consumption for the year 2012:

```{python}
oil_2012
```

And 'country_regions' lists countries along with their respective regions and continents:

```{python}
country_regions
```

Join the two datasets using the country codes as the key. Then find the countries with the highest oil consumption in each continent. As a sanity check, your answer should include the US and China.

```{python}
oil_2012_code["country_code"] = cc.convert(names=oil_2012["country"], to="ISO3")
```
```{python}
pd.merge(country_regions, oil_2012, on = "country_code")
```