# Imports


```{python}
import pandas as pd
```

# Dataset


```{python}
yaounde = pd.read_csv("data/yaounde_data.csv")
yaounde.head()
```


```{python}
yao = yaounde[["age", "sex", "weight_kg", "neighborhood", "occupation", "symptoms", "is_smoker", "is_pregnant", "igg_result", "igm_result"]]

yao
```

# Introduce query


```{python}
yao.query("sex == 'Male' ") #testing for equality with ==, with query within quotes and actual thing we're looking for in single quotes
```


```{python}
yao.query('sex == "Male"').shape #attribute, not a method, to get # rows, columns
```

```{python}
#get the number of rows that fulfil the criteria
yao.query('sex == "Male"').shape[0] 
```


```{python}
# queries do not modify the dataframe itself
# you need to create a new object/variable
yao_male = yao.query('sex == "Male"')
yao_male
```

# Practice Q: subset for pregnant respondents
Pregnant individuals have the is_pregnant column set to "Yes". Subset just these individuals and store the result in a new data frame called yao_pregnant.

# Relational operators

```{python}
yao.query("sex == 'Male'") # equal to
yao.query("sex != 'Male'") # not equal to
yao.query("age > 7") # greater than
yao.query("age >= 7") # greater than or equal to
yao.query("age < 7") # less than
yao.query("age <= 7") # less than or equal to
# isin
yao.query("neighborhood.isin(['Briqueterie', 'Carriere'])")
```

# Practice: relational operators
From yao, keep only respondents who were children (under 18). Assign the result to a new DataFrame called yao_children. There should be 291 rows.

With isin(), keep only respondents who live in the "Carriere" or "Ekoudou" neighborhoods. Assign the result to a new DataFrame called yao_carriere_ekoudou. There should be 426 rows.


```{python}
yao_children = yao.query("age < 18")
yao_children
```


```{python}
yao_carriere_ekoudou = yao.query("neighborhood.isin(['Carriere', 'Ekoudou'])")
yao_carriere_ekoudou
```

# Accessing external variables


```{python}
min_age = 25

yao.query("age >= @min_age")
```

# Practice Q: subset for young respondents
From yao, keep respondents who are less than or equal to the variable max_age, defined below. Assign the result to a new DataFrame called yao_young. There should be 590 rows.

```{python}
max_age = 30
yao_young = yao.query("age <= @max_age")
yao_young
```

# combining conditions


```{python}
# age less than 18 or greater than 65
yao.query("age < 18 | age > 65")
```


```{python}
# either pregnant or ex-smokers
yao.query('is_pregnant == "Yes" | is_smoker == "Ex-smoker"')
```


```{python}
# pregnant and an ex-smoker
yao.query('is_pregnant == "Yes" & is_smoker == "Ex_smoker" ')
```


```{python}
# get unique values in columns
yao.is_smoker.value_counts()
```

# Practice Q: subset for IGG positive men

Subset yao to only keep men who tested IgG positive. Assign the result to a new DataFrame called yao_igg_positive_men. There should be 148 rows after your query. Think carefully about whether to use & or |


```{python}
yao.igg_result.value_counts()

yao_igg_positive_men = yao.query('sex == "Male" & igg_result == "Positive"')
yao_igg_positive_men
```

# Negating conditions with the ~ operator


```{python}
# return individuals who do not fulfill the conditions
yao.query("~(occupation == 'Student')")
```


```{python}
# eqeuivalent to:
yao.query("occupation != 'Student'")
```


```{python}
yao.query("~(age < 18 | weight_kg < 30)")
```

# Practice Q: Drop Smokers and drop those above 50
We want to avoid giving a drug to older individuals and smokers. From yao, drop respondents that are either above 50 or who are smokers. Use ~ to negate the conditions. Assign the result to a new DataFrame called yao_dropped. Your output should have 810 rows.

```{python}
yao_dropped = yao.query("~(age > 50 | is_smoker == 'Smoker')")
yao_dropped
```

# NaN values


```{python}
#NaN = not a value so this does not work
#yao.query("is_pregnant == NaN")
```


```{python}
yao.query("is_pregnant.isna()") #isna method
```

```{python}
yao.query("is_pregnant.notna()") #notna method
```

# Practice Q: Keep missing smoking status
From the yao dataset, keep all the respondents who had NA records for the report of their smoking status.

```{python}
yao.query("is_smoker.isna()")
```

# Querying based on string patterns

```{python}
yao.occupation.value_counts()
```


```{python}
# values containing the string student
yao.query("occupation.str.contains('Student')")
```


```{python}
# values not containing the string student
yao.query(" ~ (occupation.str.contains('Student'))")
```

```{python}
yao.query(" (occupation.str.contains('Student|Farmer'))") # no space between | and next string
```

# Practice Q: Symptoms
Query yao to find respondents who reported "Cough" or "Fever" as symptoms. Your answer should have 219 rows.


```{python}
yao.query(" (symptoms.str.contains('Cough|Fever'))")
```


